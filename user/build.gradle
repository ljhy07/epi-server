buildscript {
    ext {
        protobufVersion = '3.25.1'
        protobufPluginVersion = '0.8.14'
        grpcVersion = '1.58.1'
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'application'
    id 'idea'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('netflixDgsVersion', "10.0.3")
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    implementation 'org.springframework.kafka:spring-kafka'
//    implementation 'org.apache.kafka:kafka-streams'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation "com.google.protobuf:protobuf-java-util:3.25.1"
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    implementation 'net.devh:grpc-client-spring-boot-starter:2.15.0.RELEASE'
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.2'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

//    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.graphql-java:graphql-java-extended-scalars'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt:0.12.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
//        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc{}
        }
    }
}

//generateJava {
//    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
//    packageName = 'com.example.user.codegen'
//    generateClient = true
//}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
