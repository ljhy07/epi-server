buildscript {
    ext {
        protobufVersion = '4.27.2'
        protobufPluginVersion = '0.9.4'
        grpcVersion = '1.65.1'
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'application'
    id 'idea'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('netflixDgsVersion', "10.0.3")
    set('springCloudVersion', "2024.0.0")
}

dependencies {

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // msa
//    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // mapstruct 설정
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // grpc
    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'    // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"           // Netty Shaded 사용(gRPC 서버와 클라이언트의 Netty 전송 계층을 제공)
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"               // Protobuf 메시지와 gRPC의 통합을 지원
    implementation "io.grpc:grpc-stub:${grpcVersion}"                   // gRPC 클라이언트 스텁을 생성
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    // db & jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.8.2'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    runtimeOnly 'org.postgresql:postgresql'
//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra-reactive'

    // graphql
//    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.graphql-java:graphql-java-extended-scalars'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // 통신
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // security
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt:0.12.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
//        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

protobuf {
    // Protobuf 컴파일러를 지정하여 .proto 파일을 컴파일합니다.
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    // 생성된 파일을 정리합니다.
    clean {
        delete generatedFilesBaseDir
    }
    // gRPC 플러그인을 설정하여 Protobuf 파일로부터 gRPC 관련 코드를 생성합니다.
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    // 모든 프로토콜 버퍼 작업에 대해 gRPC 플러그인을 적용합니다.
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

//generateJava {
//    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
//    packageName = 'com.example.user.codegen'
//    generateClient = true
//}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
