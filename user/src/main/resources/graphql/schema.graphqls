type Query {
    getAllUser: [UserQueryResponse],
    getUserById(userId: Int): UserQueryResponse,
    getUserByAccessToken(accessToken: String): UserQueryResponse

}

type Mutation {
    createUser(userCreateInput: UserCreateInput): UserMutationResponse
    updateUser(userUpdateInput: UserUpdateInput): UserMutationResponse
    updateUserPassword(userPasswordUpdateInput: UserPasswordUpdateInput): UserMutationResponse
    deleteUser(userDeleteInput: UserDeleteInput): UserMutationResponse
}

type User {
    id: ID!
    name: String
    password: String
    email: String
    role: Role
}

enum Role {
    Store,
    User
}

type UserQueryResponse {
    id: ID!
    name: String!
    email: String!
}

input UserCreateInput {
    name: String
    password: String
    email: String
    role: Role
}

input UserUpdateInput {
    accessToken: String
    name: String
    email: String
    role: Role
}

input UserPasswordUpdateInput {
    userId: Int
    password: String
}

input UserDeleteInput {
    id: ID!
    accessToken: String
}

type UserMutationResponse {
    id: ID!
}
